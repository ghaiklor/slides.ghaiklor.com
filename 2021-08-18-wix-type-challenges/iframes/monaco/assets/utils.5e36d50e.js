import{l as e}from"./index.62ec6677.js";import"./editorWorker.05926334.js";e.typescript.typescriptDefaults.addExtraLib('declare module "@type-challenges/utils" { export type Expect<T extends true> = T\nexport type ExpectTrue<T extends true> = T\nexport type ExpectFalse<T extends false> = T\nexport type IsTrue<T extends true> = T\nexport type IsFalse<T extends false> = T\n\nexport type NotEqual<X, Y> = true extends Equal<X, Y> ? false : true\nexport type Equal<X, Y> =\n  (<T>() => T extends X ? 1 : 2) extends\n  (<T>() => T extends Y ? 1 : 2) ? true : false\n\n// https://stackoverflow.com/questions/49927523/disallow-call-with-any/49928360#49928360\nexport type IsAny<T> = 0 extends (1 & T) ? true : false\nexport type NotAny<T> = true extends IsAny<T> ? false : true\n\nexport type Debug<T> = { [K in keyof T]: T[K] }\nexport type MergeInsertions<T> =\n  T extends object\n    ? { [K in keyof T]: MergeInsertions<T[K]> }\n    : T\n\nexport type Alike<X, Y> = Equal<MergeInsertions<X>, MergeInsertions<Y>>\n\nexport type ExpectExtends<VALUE, EXPECTED> = EXPECTED extends VALUE ? true : false\nexport type ExpectValidArgs<FUNC extends (...args: any[]) => any, ARGS extends any[]> = ARGS extends Parameters<FUNC>\n  ? true\n  : false\n\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never\n }');
